// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace Sysworxx
{
    internal static unsafe partial class SysworxxIoSys
    {
        const string __DllName = "sysworxx_io.so";



        /// <summary>
        ///  @brief Initializes the I/O driver.
        ///  @note This function has to be called before any of the other API
        ///        functions can be used.
        ///
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoInit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoInit();

        /// <summary>
        ///  @brief De-initialization of the I/O driver
        ///
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoShutdown", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoShutdown();

        /// <summary>
        ///  @brief Get the version of the I/O driver
        ///
        ///  @param puMajor_p Pointer to the resulting major part of the version number
        ///  @param puMinor_p Pointer to the resulting minor part of the version number
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoGetVersion", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoGetVersion(byte* puMajor_p, byte* puMinor_p);

        /// <summary>
        ///  @brief Get the tickcount of the system in milliseconds
        ///
        ///  This is a increasing time value starting at an unknown point in
        ///  time.
        ///
        ///  @param puTickCount_p Pointer to the resulting timestamp value
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoGetTickCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoGetTickCount(uint* puTickCount_p);

        /// <summary>
        ///  @brief Enable the systems watchdog
        ///
        ///  @param fMonitorOnly_p Enable monitoring only mode. If the watchdog was not
        ///         serviced in time, an error will be reported by the return value of
        ///         IoServiceWatchdog().
        ///
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoEnableWatchdog", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoEnableWatchdog(IoBool fMonitorOnly_p);

        /// <summary>
        ///  @brief Service the system watchdog
        ///
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoServiceWatchdog", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoServiceWatchdog();

        /// <summary>
        ///  @brief Get information about device revision and available I/O channels
        ///
        ///  @param pHwInfo_p Destination structure with the resulting information
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoGetHardwareInfo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoGetHardwareInfo(IoHwInfo* pHwInfo_p);

        /// <summary>
        ///  @brief Set the RUN LED
        ///
        ///  @param fState_p The state to set
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoSetRunLed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoSetRunLed(IoBool fState_p);

        /// <summary>
        ///  @brief Set the ERROR LED
        ///
        ///  @param fState_p The state to set
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoSetErrLed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoSetErrLed(IoBool fState_p);

        /// <summary>
        ///  @brief Get device interface information
        ///
        ///  @param sPath_p Path to file
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoGetJson", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoGetJson(byte* sPath_p);

        /// <summary>
        ///  @brief Get value of the RUN switch
        ///
        ///  @param pfRunSwitch_p Pointer to the value destination
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoGetRunSwitch", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoGetRunSwitch(IoBool* pfRunSwitch_p);

        /// <summary>
        ///  @brief Get value of the config switch
        ///
        ///  @param pfConfig_p Pointer to the value destination
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoGetConfigEnabled", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoGetConfigEnabled(IoBool* pfConfig_p);

        /// <summary>
        ///  @brief Set the value of a digital output
        ///
        ///  @param uChannel_p The channel of the digital output
        ///  @param fEnable_p The value to set
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoSetOutput", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoSetOutput(byte uChannel_p, IoBool fEnable_p);

        /// <summary>
        ///  @brief Get the value of a digital input
        ///
        ///  @param uChannel_p The channel of the digital input
        ///  @param pfState_p Pointer to the state destination
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoGetInput", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoGetInput(byte uChannel_p, IoBool* pfState_p);

        /// <summary>
        ///  @brief Register a callback to signal changes on an digital input
        ///
        ///  @param uChannel_p The channel of the digital input
        ///  @param pfnCallback_p The callback function to register of type #IoInputCallback
        ///  @param uInterruptTrigger_p Set the kind of trigger for the input #IoInputTrigger
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoRegisterInputCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoRegisterInputCallback(byte uChannel_p, delegate* unmanaged[Cdecl]<byte, byte, void> pfnCallback_p, IoInputTrigger uInterruptTrigger_p);

        /// <summary>
        ///  @brief Un-register / disable interrupt handling for a digital input
        ///
        ///  @param uChannel_p Analogous to #IoRegisterInputCallback
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoUnregisterInputCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoUnregisterInputCallback(byte uChannel_p);

        /// <summary>
        ///  @brief Get the value of an ADC channel
        ///
        ///  @param uChannel_p The channel to get
        ///  @param puAdcValue_p Pointer to the value destination
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoAdcGetValue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoAdcGetValue(byte uChannel_p, ushort* puAdcValue_p);

        /// <summary>
        ///  @brief Setup an ADC channel for voltage or current measurement
        ///
        ///  If a ADC does not support a specific mode or sensor type the error IoResult_NotImplemented
        ///  will be returned.
        ///
        ///  @param uChannel_p The channel to setup
        ///  @param uMode_p The mode of type #IoAnalogMode
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoAdcSetMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoAdcSetMode(byte uChannel_p, IoAnalogMode uMode_p);

        /// <summary>
        ///  @brief Set DAC output value
        ///
        ///  @param uChannel_p The channel to set
        ///  @param uValue_p The value to set
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoDacSetValue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoDacSetValue(byte uChannel_p, ushort uValue_p);

        /// <summary>
        ///  @brief Set mode of a given temperature sensor
        ///
        ///  If a sensor does not support a specific mode or sensor type the error IoResult_NotImplemented
        ///  will be returned.
        ///
        ///  @param uChannel_p The temperature sensor channel
        ///  @param uMode_p The mode of type temperature sensor
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoTmpSetMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoTmpSetMode(byte uChannel_p, IoTmpMode uMode_p, IoTmpSensorType uType_p);

        /// <summary>
        ///  @brief Get the value of a temperature sensor
        ///
        ///  @param uChannel_p The temperature sensor channel
        ///  @param piValue_p Pointer to the value destination in 1/10000 °C
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoTmpGetValue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoTmpGetValue(byte uChannel_p, int* piValue_p);

        /// <summary>
        ///  @brief Enable/disable a counter channel
        ///
        ///  @param uChannel_p The channel to control
        ///  @param fEnable_p Enable with true value, false will disable it
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoCntEnable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoCntEnable(byte uChannel_p, IoBool fEnable_p);

        /// <summary>
        ///  @brief Setup the counters mode
        ///
        ///  @param uChannel_p The channel to setup
        ///  @param uMode_p The mode of the counter, see IoCntMode
        ///  @param uTrigger_p The trigger of the counter, see IoCntTrigger
        ///  @param uDir_p The direction of counting, see IoCntDirection
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoCntSetup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoCntSetup(byte uChannel_p, IoCntMode uMode_p, IoCntTrigger uTrigger_p, IoCntDirection uDir_p);

        /// <summary>
        ///  @brief Set the initial value of the counter
        ///
        ///  @param uChannel_p The channel to setup
        ///  @param iPreload_p The initial value to set
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoCntSetPreload", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoCntSetPreload(byte uChannel_p, int iPreload_p);

        /// <summary>
        ///  @brief Get the value of a counter channel
        ///
        ///  @param uChannel_p The channel to get the value for
        ///  @param piValue_p Pointer to the value destination
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoCntGetValue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoCntGetValue(byte uChannel_p, int* piValue_p);

        /// <summary>
        ///  @brief Set the timebase for PWM output
        ///
        ///  @param uChannel_p The channel to set the value for
        ///  @param timebase Timebase enum
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoPwmSetTimebase", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoPwmSetTimebase(byte uChannel_p, IoPwmTimebase timebase);

        /// <summary>
        ///  @brief Setup an PWM channel
        ///
        ///  @param uChannel_p The channel to setup
        ///  @param period The periode of the PWM
        ///  @param duty_cycle The duty cycle of the PWM
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoPwmSetup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoPwmSetup(byte uChannel_p, ushort period, ushort duty_cycle);

        /// <summary>
        ///  @brief Enable/Disable PWM output
        ///
        ///  @param uChannel_p The channel of the digital output
        ///  @param fRun_p The value to set
        ///  @return IoResult Driver result code of type IoResult
        /// </summary>
        [DllImport(__DllName, EntryPoint = "IoPwmEnable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern IoResult IoPwmEnable(byte uChannel_p, [MarshalAs(UnmanagedType.U1)] bool fRun_p);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct IoHwInfo
    {
        public byte m_uPcbRevision;
        public byte m_uDiChannels;
        public byte m_uDoChannels;
        public byte m_uAiChannels;
        public byte m_uAoChannels;
        public byte m_uTmpChannels;
        public byte m_uCntChannels;
        public byte m_uEncChannels;
        public byte m_uPwmChannels;
        public byte m_uLegacyDiChannels;
        public byte m_uLegacyDoChannels;
        public byte m_uLegacyRelayChannels;
        public byte m_uLegacyRelayOffset;
    }


    internal enum IoResult : uint
    {
        Success = 0,
        Error = 255,
        NotImplemented = 254,
        InvalidParameter = 253,
        InvalidChannel = 252,
        InvalidMode = 251,
        InvalidTimebase = 250,
        InvalidDelta = 249,
        PtoParamTabFull = 248,
        DevAccessFailed = 247,
        Reserved0 = 246,
        Reserved1 = 245,
        ShpImgError = 244,
        AddressOutOfRange = 243,
        WatchdogTimeout = 242,
    }

    internal enum IoBool : byte
    {
        False = 0,
        True = 1,
    }

    internal enum IoInputTrigger : byte
    {
        None = 0,
        RisingEdge = 1,
        FallingEdge = 2,
        BothEdge = 3,
    }

    internal enum IoAnalogMode : byte
    {
        Voltage = 0,
        Current = 1,
    }

    internal enum IoTmpMode : byte
    {
        RtdTwoWire = 0,
        RtdThreeWire = 1,
        RtdFourWire = 2,
    }

    internal enum IoTmpSensorType : byte
    {
        PT100 = 0,
        PT1000 = 1,
    }

    internal enum IoCntMode : byte
    {
        Counter = 0,
        ABEncoder = 1,
    }

    internal enum IoCntTrigger : byte
    {
        RisingEdge = 0,
        FallingEdge = 1,
        AnyEdge = 2,
    }

    internal enum IoCntDirection : byte
    {
        Up = 0,
        Down = 1,
    }

    internal enum IoPwmTimebase : byte
    {
        Ns800 = 1,
        Ms1 = 2,
    }


}
